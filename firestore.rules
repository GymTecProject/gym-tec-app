
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules

    match /{document=**} {
       
      match /users/{userId} {
        allow create: if true;
        allow read: if (
          request.auth != null
        )
        allow update: if (
          request.auth != null
          && (request.auth.uid == userId || isAdmin())

        )
      }
      match /users/{userId}/protected/{data} {
        allow create: if true;
        allow read: if (
          isLogged()
          && (request.auth.uid == userId || isAdmin() || isTrainer())
        )
        allow update: if (
          isLogged()
          && (request.auth.uid == userId || isAdmin())
        )
      }

      match /users/{userId}/private/{data} {
        allow create: if true;
        allow read: if (
          isLogged()
          && (request.auth.uid == userId || isAdmin())
        )
        allow update: if isAdmin()
      }
      match /users/{userId}/measurements/{data} {
        allow create: if (
          isLogged()
          && (isAdmin() || isTrainer())
        );
        allow read: if (
          isLogged()
          && (isAdmin() || isTrainer() || isMeasurementOwner())
        )
      }
    }

    match /exercises/{exerciseId} {
      allow create, update: if (
        isLogged()
        && isAdmin()
      );
      allow read: if (
        isLogged()
        && (isAdmin() || isTrainer())
      )
    }

    match /routines/{routineId} {
      allow create, update, read: if (
        isLogged()
        && (isAdmin() || isTrainer() || (request.auth.uid == resource.data.clientId))

      );
    }

    match /weeklyChallenges/{challenge}{

      allow read: if isLogged();
      allow create, update: if (
        isLogged()
        && (isAdmin() || isTrainer())
      );
    }

    match /errorReports/{report} {
      allow create: if isLogged();
      allow read: if (
        isLogged()
        && isAdmin()
      )
    }

    function isLogged() {
      return request.auth != null;
    }
    function isAdmin() {
      return isLogged() && get(/databases/$(database)/documents/users/$(request.auth.uid)/private/data).data.accountType == "administrator";
    }
    function isTrainer() {
      return isLogged() && get(/databases/$(database)/documents/users/$(request.auth.uid)/private/data).data.accountType == "trainer";
    }

    function isMeasurementOwner() {
      return isLogged() && get(/databases/$(database)/documents/users/$(request.auth.uid)).id == request.auth.uid;
    }

  }

}

